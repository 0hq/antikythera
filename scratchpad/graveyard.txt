
func minimax_pll(position *chess.Position, ply int, max bool, last_move *chess.Move, move_channel chan *chess.Move, eval_channel chan int, isRoot bool) {
	explored++

	// max ply reached
	if ply == 0 {
		// evaluate position and send back to parent
		move_channel <- last_move
		eval_channel <- evaluate_position_v1(position.Board(), max)
		return
	}

	// generate moves
	var moves []*chess.Move = position.ValidMoves()
	if (isRoot) {
		out("Moves:", moves)
	}
	var length int = len(moves)

	// create channel to pass back move and eval
	move_channel_local := make(chan *chess.Move, length)
	eval_channel_local := make(chan int, length)

	// create goroutines for each move
    for _, move := range moves {
        go minimax_pll(position.Update(move), ply-1, !max, move, move_channel_local, eval_channel_local, false)
    }

	// wait for all goroutines to finish
	var eval int = -1 * math.MaxInt
	var best *chess.Move = nil
	for i := 0; i < length; i++ {
		move := <-move_channel_local
		tempeval := -1 * <-eval_channel_local
		if tempeval > eval {
			eval = tempeval
			best = move
		}
	}

	// pass value back to parent goroutine
	move_channel <- best
	eval_channel <- eval

	return
}


func evaluate_position_v1(board *chess.Board, max bool) int {
	squares := board.SquareMap()
	var material int = 0
	for _, piece := range squares {
		var sign int = 1
		if piece.Color() == chess.Black {
			sign = -1
		}
		material += piece_map_v1[piece.Type()] * sign
	}

	return material
}

// func benchmark_plain_ab_move_ordering() {
// 	fen, _ := chess.FEN("3qr2k/pbpp2pp/1p5N/3Q2b1/2P1P3/P7/1PP2PPP/R4RK1 w - - 0 1")
// 	game := chess.NewGame(fen)
// 	benchmark_range(4, 4, engine_minimax_plain, game.Clone().Position())
// 	// DO_MOVE_SORTING = false
// 	benchmark_range(4, 4, engine_minimax_plain_ab, game.Clone().Position())
// 	// DO_MOVE_SORTING = true
// 	benchmark_range(4, 4, engine_minimax_plain_ab, game.Clone().Position())
// }


// test_m2(engine_minimax_plain_ab_q)
	// benchmark_engines(plain_engines, newGame)
	// benchmark_pll(4)
	// x move_sort_test(game_from_fen("1k1r3r/pp1bbp1p/5p2/1B2n3/5B2/3P1N2/PP3PPP/R4RK1 w - - 3 16").Position())
	// fmt.Println(game_from_fen("3q2r1/4n2k/p1p1rBpp/PpPpPp2/1P3P1Q/2P3R1/7P/1R5K w - - 1 1").Position().Turn())
	// 6r1/pppk4/3p4/8/2PnPp1Q/7P/PP4r1/R5RK b - - 1 24
	// benchmark_range(4, 6, engine_minimax_plain_ab_q, game_from_fen("6r1/pppk4/3p4/8/2PnPp1Q/7P/PP4r1/R5RK b - - 1 24").Position())
	// fmt.Println(evaluate_position_v1(game_from_fen("3q2rk/pbpp1Npp/1p6/Q5b1/2P1P3/P7/1PP2PPP/R4RK1 b - - 3 2 ").Position()))
	// benchmark_range(2, 2, engine_minimax_plain_ab_q, game_from_fen("8/pppk4/3p4/8/2P1Pp1n/7P/PP3K2/8 b - - 1 28").Position())
	// benchmark_range(4, 6, engine_minimax_plain_ab_q, game_from_fen("6r1/pppk4/3p4/8/2PnPp1Q/7P/PP6/6RK b - - 0 25").Position())

	// benchmark_range(4, 4, engine_minimax_plain_ab_q, game_from_fen("3q2r1/4n3/p1p1rBpk/PpPpPp2/1P3P2/2P3R1/7P/1R5K w - - 0 2").Position())
	// test_exchange_4move(engine_minimax_plain, EngineConfig{ply: 4})
	// test_m2(&engine_minimax_plain_ab_q)
	// position := game_from_fen("r2qk2r/pb4pp/1n2Pb2/2B2Q2/p1p5/2P5/2B2PPP/RN2R1K1 w - - 1 1").Position()
	// fmt.Println(engine.Run_Engine(position))
	// engine.Set_Config(EngineConfig{ply: 4})
	// fmt.Println(engine.Run_Engine(position))
	// move, eval := engine.Run_Engine(game_from_fen("3qr2k/pbpp2pp/1p5N/3Q2b1/2P1P3/P7/1PP2PPP/R4RK1 w - - 0 1").Position())
	// fmt.Println(parse_test_file("tests/EigenmannRapidEngineTest.txt", parse_epd_record))
	// benchmark_range(6, 6, engine_minimax_plain_ab_q, game_from_fen("5rk1/5Npp/8/3Q4/8/8/8/7K w - - 0 1").Position())
	// test_m2(engine_minimax_plain)

	// fmt.Println(perft(5, newGame.Clone().Position()))
	// benchmark_range(1, 7, engine_perft_pll, newGame.Clone().Position())

	// fmt.Println(game_from_fen("rn1qkb1r/pp2pppp/5n2/3p1b2/3P4/2N1P3/PP3PPP/R1BQKBNR w KQkq - 0 1").Position().Board().Draw())
	// fmt.Println(parse_epd_record("r1bqk1r1/1p1p1n2/p1n2pN1/2p1b2Q/2P1Pp2/1PN5/PB4PP/R4RK1 w - - bm Rxf4; id \"ERET 001 - Relief\";"))
	// fmt.Println(parse_epd_file("tests/EigenmannRapidEngineTest.txt"))
	// run_tests(engine_minimax_plain_ab_q, EngineConfig{ply: 3}, "tests/EigenmannRapidEngineTest.txt")
	// iterative_deepening_v0(engine_minimax_plain_ab_q, game_from_fen("5r1k/6pp/7N/3Q4/8/8/8/7K w - - 2 2").Position(), 30)

	func get_opening(g *chess.Game, retries int) *chess.Move {
	moves := g.Moves()
	if len(moves) == 0 && g.FEN() == "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1" {
		var gx *chess.Game = chess.NewGame(chess.UseNotation(chess.UCINotation{}))
		gx.MoveStr("e2e4")
		fmt.Println(gx.Moves())
		return gx.Moves()[0]
	}
	o := book.Find(moves) // find current opening
	if o == nil {
		return nil
	}
	fmt.Println("\nFrom:", o.Title())
	// fmt.Println(g.Moves())
	p := book.Possible(g.Moves()) // all openings available
	if len(p) > 0 {
		r := p[rand.Intn(len(p))] // random opening available
		fmt.Println("To:", r.Title())
		fmt.Println(r.PGN())
		// pgn, err := chess.PGN(bytes.NewBufferString(r.PGN()))
		// if err != nil {
		// 	panic(err)
		// }
		split := strings.Split(r.PGN(), " ")
		if len(split) <= len(g.Moves()) {
			if len(p) == 1 || retries > 3 {
				return nil
			}
			return get_opening(g, retries + 1)
		}
		gx := chess.NewGame(chess.UseNotation(chess.UCINotation{}))
		for _, s := range split {
			gx.MoveStr(s)
		}
		ms := gx.Moves()
		// fmt.Println(split)
		m := ms[len(g.Moves())]
		fmt.Println(m)
		return m
	}
	return nil
}